root = argv(){1};
geometry = argv(){2};
N = str2num(argv(){3});

rooms = [ 5 10 5 10 2 5 ];
betas = [ 0.7 0.9 ];
speeds = [ 340.0 355.0 ];
fs = 16000;
margin = 0.5;
dists = [ 1.0 5.0 ];
counts = [ 2 2 ];
noises = [ 0.0005 0.002 ];
dtdoa = 1.0;

if strcmp(geometry, 'pair')
    mics = [ -0.5 0.0 0.0 ; 0.5 0.0 0.0 ];
    scales = [ 0.04 0.20 ];
end

if strcmp(geometry, 'respeaker_usb')
    mics = [ -0.0229 -0.0229 0.0 ; ...
             -0.0229 +0.0229 0.0 ; ...
             +0.0229 -0.0229 0.0 ; ...
             +0.0229 +0.0229 0.0 ];
    scales = [ 1.0 1.0 ];
end

if strcmp(geometry, 'respeaker_core')
    mics = [ +0.0463 +0.0000 0.0 ; ...
             +0.0232 +0.0401 0.0 ; ...
             -0.0232 +0.0401 0.0 ; ...
             -0.0463 +0.0000 0.0 ; ...
             -0.0232 -0.0401 0.0 ; ...
             +0.0232 -0.0401 0.0 ];
    scales = [ 1.0 1.0 ];
end

if strcmp(geometry, 'matrix_creator')
    mics = [ +0.0201 -0.0485 0.0 ; ...
             -0.0201 -0.0485 0.0 ; ...
             -0.0485 -0.0201 0.0 ; ...
             -0.0485 +0.0201 0.0 ; ...
             -0.0201 +0.0485 0.0 ; ...
             +0.0201 +0.0485 0.0 ; ...
             +0.0485 +0.0201 0.0 ; ...
             +0.0485 -0.0201 0.0 ];
    scales = [ 1.0 1.0 ];             
end

if strcmp(geometry, 'matrix_voice')
    mics = [ +0.0000 +0.0000 0.0 ; ...
             -0.0381 +0.0036 0.0 ; ...
             -0.0210 +0.0320 0.0 ; ...
             +0.0120 +0.0364 0.0 ; ...
             +0.0359 +0.0133 0.0 ; ...
             +0.0328 -0.0198 0.0 ; ...
             +0.0050 -0.0380 0.0 ; ...
             -0.0266 -0.0276 0.0 ];
    scales = [ 1.0 1.0 ];             
end

if strcmp(geometry, 'minidsp_uma')
    mics = [ +0.0000 +0.0000 0.0 ; ...
             +0.0000 +0.0430 0.0 ; ...
             +0.0370 +0.0210 0.0 ; ...
             +0.0370 -0.0210 0.0 ; ...
             +0.0000 -0.0430 0.0 ; ...
             -0.0370 -0.0210 0.0 ; ...
             -0.0370 +0.0210 0.0 ];
    scales = [ 1.0 1.0 ];             
end

if strcmp(geometry, 'microsoft_kinect')
    mics = [ -0.1130 +0.0000 0.0 ; ...
             +0.0360 +0.0000 0.0 ; ...
             +0.0760 +0.0000 0.0 ; ...
             +0.1130 +0.0000 0.0 ];
    scales = [ 1.0 1.0 ];             
end
if strcmp(geometry, 'cube_shape')
    mics = [ -0.0300 -0.0300  0.0000 ; ...
             -0.0300 +0.0300  0.0000 ; ...
             +0.0300 -0.0300  0.0000 ; ...
             +0.0300 +0.0300  0.0000 ; ...
             -0.0300 -0.0300 +0.0600 ; ...
             -0.0300 +0.0300 +0.0600 ; ...
              0.0000 +0.0300 +0.0600 ; ...
             +0.0300 -0.0300 +0.0600 ; ...
             +0.0300 +0.0300 +0.0600 ];
    scales = [1.0 1,0];
end

if strcmp(geometry, 'spherical_shape')
    mics = [  0.0266  0.0898   0.0348 ; ...
              0.0527 -0.0784  -0.0326 ; ...
              0.0313  0.00343 -0.0948 ; ...
             -0.0459 -0.0611  -0.0644 ; ...
             -0.0309 -0.00368  0.0950 ; ...
              0.0620 -0.0428   0.0656 ; ...
              0.0459  0.0611   0.0644 ; ...
             -0.0618  0.0426  -0.066  ; ...
             -0.0528  0.0782   0.0328 ; ...
             -0.0978 -0.0146   0.0144 ; ...
             -0.0271 -0.0897   0.0349 ; ...
              0.0977  0.0151  -0.0144];
    scales = [ 1.0 1.0 ];             
end

if strcmp(geometry, 'cylindrical_2f')
    mics = [ +0.0201 -0.0485 +0.0300 ; ...
             -0.0201 -0.0485 +0.0300 ; ...
             -0.0485 -0.0201 +0.0300 ; ...
             -0.0485 +0.0201 +0.0300 ; ...
             -0.0201 +0.0485 +0.0300 ; ...
             +0.0201 +0.0485 +0.0300 ; ...
             +0.0485 +0.0201 +0.0300 ; ...
             +0.0485 -0.0201 +0.0300 ; ...
             +0.0201 -0.0485 -0.0300 ; ...
             -0.0201 -0.0485 -0.0300 ; ...
             -0.0485 -0.0201 -0.0300 ; ...
             -0.0485 +0.0201 -0.0300 ; ...
             -0.0201 +0.0485 -0.0300 ; ...
             +0.0201 +0.0485 -0.0300 ; ...
             +0.0485 +0.0201 -0.0300 ; ...
             +0.0485 -0.0201 -0.0300 ];
    scales = [ 1.0 1.0 ];             
end

if strcmp(geometry, 'arbitraryshape_6')
    mics = [ +0.0588 +0.0079 +0.0330 ; ...
             +0.0229 +0.0994 +0.0921 ;...
             +0.0189 +0.0029 +0.0279 ; ...
             +0.0850 +0.0800 +0.0935 ; ...
             +0.0112 +0.0393 +0.0039 ; ...
             +0.0955 +0.0077 +0.0885];
    scales = [ 1.0 1.0 ];             
end

if strcmp(geometry, 'arbitraryshape_8')
    mics = [ +0.0983 +0.0415 +0.0814 ;...
             +0.0092 +0.0977 +0.0829 ;...
             +0.0983 +0.0143 +0.0980 ;...
             +0.0024 +0.0449 +0.0564 ;...
             +0.0980 +0.0859 +0.0678 ;...
             +0.0017 +0.0167 +0.0872 ;...
             +0.0860 +0.0999 +0.0008 ;...
             +0.0200 +0.0057 +0.0817 ];
    scales = [ 1.0 1.0 ];             
end

if strcmp(geometry, 'arbitraryshape_12')
    mics = [+0.0931	 +0.0285  +0.0877 ;...
            +0.0037	 +0.0939  +0.0295 ;...
            +0.0682	 +0.0060  +0.0964 ;...
            +0.0270	 +0.0838  +0.0067 ;...
            +0.0830	 +0.0179  +0.0972 ;...
            +0.0064	 +0.0768  +0.0072 ;...
            +0.0952	 +0.0286  +0.0947 ;...
            +0.0073	 +0.0682  +0.0072 ;...
            +0.0965	 +0.0542  +0.0940 ;...
            +0.0155  +0.0303  +0.0011 ;...
            +0.0846  +0.0911  +0.0903 ;...
            +0.0132	 +0.0093  +0.0218];
    scales = [ 1.0 1.0 ];             
end

for n = 1:1:N

    disp(n);

    params = rir_setup2(rooms, betas, speeds, mics, scales, fs, margin, dists, counts, noises, dtdoa);
    json = rir_json(params);
    wave = rir_wave(params);

    id = ('a':'z')(randi([1 26],1,10));
    path = [ root id(1) '/' id(2) '/' id ];

    disp([path '.json']);
    
    fid = fopen([path '.json'], 'w');
    fprintf(fid, json);
    fclose(fid);

    audiowrite([path '.wav'], wave', fs);
    
end